# 习惯打卡应用 - 代码规范和重构指导

## 代码质量标准
- 单个文件不超过300行
- 单个方法不超过50行
- 类的方法不超过20个
- 使用ES6模块系统
- 避免全局变量污染

## 文件结构规范
```
habit_app/
├── src/
│   ├── js/
│   │   ├── main.js              # 主入口 (50行)
│   │   ├── App.js               # 主应用类 (200行)
│   │   ├── HabitTracker.js      # 核心数据管理 (150行)
│   │   ├── WeekView.js          # 周视图渲染 (200行)
│   │   ├── ScoreModal.js        # 分数弹窗 (150行)
│   │   ├── ChartManager.js      # 图表管理 (150行)
│   │   ├── StorageManager.js    # 数据存储 (100行)
│   │   ├── EventManager.js      # 事件管理 (100行)
│   │   └── utils/
│   │       ├── dateUtils.js     # 日期工具 (100行)
│   │       ├── scoreUtils.js    # 分数计算 (100行)
│   │       └── constants.js     # 常量定义 (50行)
│   ├── css/
│   │   ├── main.css            # 主样式 (200行)
│   │   ├── components.css      # 组件样式 (300行)
│   │   └── themes.css          # 主题样式 (200行)
│   └── index.html
```

## 命名规范
- 类名：PascalCase (如 HabitTracker)
- 方法名：camelCase (如 renderWeekView)
- 常量：UPPER_SNAKE_CASE (如 MAX_SCORE)
- 私有方法：以下划线开头 (如 _calculateStreak)

## 重构优先级
1. 高优先级：拆分核心类
2. 中优先级：提取工具函数
3. 低优先级：样式模块化

## 开发建议
- 使用ES6模块导入导出
- 遵循单一职责原则
- 使用事件委托减少事件监听器
- 缓存DOM查询结果
- 避免在循环中创建函数

## 代码审查检查点
- [ ] 文件大小是否合理（<300行）
- [ ] 类是否遵循单一职责原则
- [ ] 方法是否过于复杂
- [ ] 是否有重复代码
- [ ] 命名是否清晰易懂
- [ ] 错误处理是否完善
- [ ] 性能是否优化
